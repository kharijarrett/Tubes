To utilize the feature detector/video recording code, please run FeatureLabelerOnePass.java. This file (a) combines the work from two previous programs into one, to allow more efficient processing, and (b) outputs a video of results to allow greater processing.

Please let me (Chris) know if you encounter any problems/questions via Christopher.J.Kymn.18@dartmouth.edu, or 310-710-0514. Thank you!

STEPS ON HOW TO RUN

See the main method of FeatureLabelerOnePass.java for a full example.

1. Initialize an instance of the FeatureLabelerOnePass object. You need to pass in two arguments. The first should be "GrayF32.class" (don't put the quotes when entering), and the second should be a path to the file where you want to store the output video. 

Example:
FeatureLabelerOnePass app = new FeatureLabelerOnePass(GrayF32.class, "benchgrab.mp4");

3. Call the process() method some number of times, each time passing a single argument, a file path to a video you'd like to process. The process method will keep track of the features appearing in each frame.

Example:
app.process("/home/grangerlab/Desktop/gopro/GOPR0125.MP4");

4. Call the app.genFeatCluster method with three arguments: (1) the minimum number of times a feature must appear to be counted, (2) the number of "words" in the VocabKMeans vocabulary you'd like, and (3) a filename to save the VocabKMeans cluster when finished.

Example:
app.genFeatCluster(app.frames/20, 50, "benchCluster");

5. Begin the video writer by calling openVid().

Example:
app.openVid();

6. Call the updateRender(String videoFilePath) method on the videos you processed, IN THE SAME ORDER that they were called by process. The order is important to ensure the videos line up with the features recalled from process. updateRender performs some processing to tell which features should stick around (more on this in the comments).

Example:
app.updateRender("/home/grangerlab/Desktop/gopro/GOPR0125.MP4");

7. Save the video file by calling closeVid().

Example:
app.closeVid();

8. (Optional) Call the saveApps() method to keep information on what featureIDs appear at particular times. This is not particularly useful now but may become more useful at a later point in time as new processing occurs.

ALTERNATE FEATURE TRACKING

To get the program to work with a different feature tracker, there are two easy possible fixes:

1. Write the tracker to accommodate the same basic methods as the SURF tracker currently being used.

2. Write the tracker however desired, and create a different method beside process() to make use of the new information.

The latter approach may be easier to implement, given that the process() method is somewhat straightforward.

TROUBLESHOOTING

In case you are unable to run code, you may need to add some external JARs to get it working. 
